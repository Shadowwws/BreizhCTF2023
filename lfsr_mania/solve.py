from Crypto.Util.number import isPrime, long_to_bytes
from math import gcd
from tqdm import tqdm

e = 0x10001
n = 32541127249676048274585294402402082041511346507140236125495367181025972412444596253951837525730727065130470995715340459822998513905305027287744911728598215459428687319994758662626235616728836195964751714247360647511726490408053929996688465628986053017961048202770753597787338727666252712403987020209769680439318652190578663503570207150781051067370023042416640000001
c = 2415413610087299939810617039650527297967694065662688028887277389318647900367452472147640886200014619727675108895968999911805080445054088264331314710831725399596057093601387084458600514464288817534610697880503331477205172488927877771388096528107170147223329601398494646270223732932367150735270360700520360821859025997610152427468326489059226944840699701327692437725

a = 2
primes = [i for i in tqdm(range(1,2**21)) if isPrime(i)]

nb = 0

M = 1

for nb in tqdm(range(0,len(primes))):
	M*=primes[nb]

x = pow(a,M,n)

i = 0

while True:
	p = gcd(x-1,n) 
	if p != n and p != 1:
		break
	x = pow(x,primes[i%len(primes)],n)
	i+=1

assert n%p == 0
q = n//p

phi = (p-1)*(q-1)
d = pow(e,-1,phi)

print(long_to_bytes(pow(c,d,n)))